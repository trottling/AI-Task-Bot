import logging
from datetime import datetime
import json

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from ai.worker import ask_ai
from ics_util.links import build_links
from keyboards.user import user_kb
from loader import db

logger = logging.getLogger(__name__)


class TaskCreation(StatesGroup):
    waiting_for_text = State()


async def start_ics_creation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == TaskCreation.waiting_for_text.state:
        await message.answer("–í—ã —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç–µ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–≤–æ–¥.", reply_markup=user_kb)
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏:")
    await state.set_state(TaskCreation.waiting_for_text)


async def create_ics_command(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("busy"):
        await message.answer("‚è≥ –£–∂–µ –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=user_kb)
        return
    await state.update_data(busy=True)
    try:
        text = message.text.strip()

        if len(text) < 10:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=user_kb)
            return

        if len(text) > 500:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=user_kb)
            return

        await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...")
        await state.clear()

        try:
            logger.info(
                f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: –≤—Ä–µ–º—è={datetime.now().strftime('%Y-%m-%d %H:%M:%S')}, "
                f"—é–∑–µ—Ä={message.from_user.id}|{message.from_user.full_name}, —Ç–µ–∫—Å—Ç={text}"
            )
            resp = await ask_ai(text)
            db.add_request(text, message.from_user.id, json.dumps(resp, ensure_ascii=False))
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å AI: %s", e)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞", reply_markup=user_kb)
            return

        if not resp:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", reply_markup=user_kb)
            return

        if resp.get("error"):
            extra = f" {resp['response']}" if resp.get('response') else ""
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{resp['error']}{extra}",
                reply_markup=user_kb,
                )
            return

        if "events_tasks" not in resp:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–≤ JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'events_tasks'", reply_markup=user_kb)
            return

        await message.answer(resp.get("response", ""), reply_markup=user_kb)

        event_tasks = [t for t in resp["events_tasks"] if t.get("type", "").strip().lower() == "event"]
        if not event_tasks:
            return

        links = build_links(event_tasks[0])
        if not links:
            logger.error("Cannot build calendar links")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π",
                reply_markup=user_kb,
            )
            return

        text_links = (
            f"[Google Calendar]({links['google']})\n"
            f"[Yandex Calendar]({links['yandex']})\n"
            f"[Mail.ru Calendar]({links['mailru']})"
        )
        await message.answer(text_links, reply_markup=user_kb, disable_web_page_preview=True)
    finally:
        await state.update_data(busy=False)

