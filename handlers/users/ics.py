import logging
import os
from datetime import datetime
import json

from aiogram.utils.i18n import gettext as _

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, FSInputFile

from ai.worker import ask_ai
from loader import ics_creator
from keyboards.user import user_kb
from loader import bot, db

logger = logging.getLogger(__name__)


class TaskCreation(StatesGroup):
    waiting_for_text = State()


async def start_ics_creation(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == TaskCreation.waiting_for_text.state:
        await message.answer(_("‚õîÔ∏è –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë."), reply_markup=user_kb)
        return
    await message.answer(
        _("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏\n\n"
          "–ë–æ—Ç –∏–∑–≤–ª–µ—á–µ—Ç —Å—É—Ç—å –∑–∞–¥–∞—á–∏, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ")
        )
    await state.set_state(TaskCreation.waiting_for_text)


async def create_ics_command(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data.get("busy"):
        await message.answer(_("‚è≥ –£–∂–µ –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."), reply_markup=user_kb)
        return
    await state.update_data(busy=True)
    try:
        text = message.text.strip()

        if len(text) < 15:
            await message.answer(_("‚õîÔ∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"), reply_markup=user_kb)
            await state.clear()
            return

        if len(text) > 750:
            await message.answer(_("‚õîÔ∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"), reply_markup=user_kb)
            await state.clear()
            return

        await message.answer(_("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á..."))
        await state.clear()

        try:
            logger.info(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: –≤—Ä–µ–º—è=%s, —é–∑–µ—Ä=%s|%s, —Ç–µ–∫—Å—Ç=%s",
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                message.from_user.id,
                message.from_user.full_name,
                text.replace("\n", ""),
                )
            resp = await ask_ai(text)
            db.add_request(
                text,
                message.from_user.id,
                json.dumps(resp, ensure_ascii=False),
                )
        except Exception as exc:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å AI: %s", exc)
            await message.answer(_("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"), reply_markup=user_kb)
            return

        if not resp:
            await message.answer(_("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"), reply_markup=user_kb)
            return

        if resp.get("error"):
            extra = f" {resp['response']}" if resp.get('response') else ""
            await message.answer(
                _(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{resp['error']}{extra}"),
                reply_markup=user_kb,
                )
            return

        if "events_tasks" not in resp:
            await message.reply(_("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–≤ JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'events_tasks'"), reply_markup=user_kb)
            return

        await message.answer(resp.get("response", ""), reply_markup=user_kb)
        logger.debug(resp)
        event_tasks = [
            t
            for t in resp["events_tasks"]
            if t.get("type", "").strip().lower() in ["event", "task"]
            ]
        if not event_tasks:
            return
        logger.debug(event_tasks)
        settings = db.get_settings(message.from_user.id) or {}
        colors = {
            1: settings.get("color_q1"),
            2: settings.get("color_q2"),
            3: settings.get("color_q3"),
            4: settings.get("color_q4"),
            0: settings.get("color_default"),
        }
        tz = settings.get("timezone", "UTC")
        ics_filename = ics_creator.create_ics({"events_tasks": event_tasks}, tz, colors)
        if not ics_filename:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ICS —Ñ–∞–π–ª")
            await message.answer(
                _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
                reply_markup=user_kb,
                )
            return

        try:
            await send_ics_file(message.chat.id, ics_filename)
        finally:
            try:
                os.unlink(ics_filename)
            except OSError as e:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s: %s", ics_filename, e)
    finally:
        await state.update_data(busy=False)


async def send_ics_file(chat_id: int, ics_filename: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª ICS."""
    if not os.path.exists(ics_filename):
        logger.error("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", ics_filename)
        return

    try:
        await bot.send_document(chat_id, FSInputFile(ics_filename))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICS: %s", e)
