import logging
import os

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, Message

from keyboards.user import user_kb
from loader import bot, db, ics_creator
from services.task_service import TaskService

logger = logging.getLogger(__name__)

task_service = TaskService(db=db, ics_creator=ics_creator)

router = Router()


class TaskCreation(StatesGroup):
    waiting_for_text = State()


async def start_ics_creation(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == TaskCreation.waiting_for_text.state:
        await message.answer("‚õîÔ∏è –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë.", reply_markup=user_kb)
        return

    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏\n\n‚ÑπÔ∏è –ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç *—Å—É—Ç—å, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ –∏ –∫–≤–∞–¥—Ä–∞—Ç –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞*", parse_mode="MarkdownV2")
    await state.set_state(TaskCreation.waiting_for_text)


async def create_ics_command(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data.get("busy"):
        await message.answer("‚è≥ –£–∂–µ –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á. *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.*", reply_markup=user_kb, parse_mode="MarkdownV2")
        return

    await state.update_data(busy=True)
    try:
        await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...")
        await state.clear()

        result = await task_service.process_task_text(text=message.text.strip(), user_id=message.from_user.id, chat_id=message.chat.id, message_chat_type=message.chat.type)
        if not result.get("success"):
            await message.answer(result["message"], reply_markup=user_kb, parse_mode="MarkdownV2")
            return

        await message.answer(result["message"], reply_markup=user_kb, parse_mode="MarkdownV2")

        event_tasks = result.get("event_tasks")
        if not event_tasks:
            return

        ics_filename = task_service.generate_ics(event_tasks)
        if not ics_filename:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ICS —Ñ–∞–π–ª")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", reply_markup=user_kb, parse_mode="MarkdownV2")
            return

        try:
            await send_ics_file(message.chat.id, ics_filename)
        finally:
            try:
                os.unlink(ics_filename)
            except OSError as e:
                logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {ics_filename}: {e}")

    finally:
        await state.update_data(busy=False)


async def send_ics_file(chat_id: int, ics_filename: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª ICS."""
    if not os.path.exists(ics_filename):
        logger.error(f"–§–∞–π–ª {ics_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        await bot.send_document(chat_id, FSInputFile(ics_filename))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICS: {e}")


@router.message(Command("create"))
async def create_from_reply(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/create** –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", parse_mode="MarkdownV2")
        return

    if not message.reply_to_message or not message.reply_to_message.text:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/create** –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.", parse_mode="MarkdownV2")
        return

    if message.from_user.username == bot.username:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")
        return

    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...")

    result = await task_service.process_task_text(text=message.reply_to_message.text.strip(), user_id=message.from_user.id, chat_id=message.chat.id, message_chat_type=message.chat.type)
    if not result.get("success"):
        await message.answer(result["message"])
        return

    await message.answer(result["message"])

    event_tasks = result.get("event_tasks")
    if not event_tasks:
        return

    ics_filename = task_service.generate_ics(event_tasks)
    if not ics_filename:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ICS —Ñ–∞–π–ª")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return

    try:
        await send_ics_file(message.chat.id, ics_filename)
    finally:
        try:
            os.unlink(ics_filename)
        except OSError as e:
            logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {ics_filename}: {e}")
