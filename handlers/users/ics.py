import logging
import os
from datetime import datetime
import json

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, FSInputFile

from ai.worker import ask_ai
from ics_util.generator import generate_ics
from keyboards.user import user_kb
from loader import bot, db

logger = logging.getLogger(__name__)


class TaskCreation(StatesGroup):
    waiting_for_text = State()


async def start_ics_creation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == TaskCreation.waiting_for_text.state:
        await message.answer("–í—ã —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç–µ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–≤–æ–¥.", reply_markup=user_kb)
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏:")
    await state.set_state(TaskCreation.waiting_for_text)


async def create_ics_command(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("busy"):
        await message.answer("‚è≥ –£–∂–µ –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=user_kb)
        return
    await state.update_data(busy=True)
    try:
        text = message.text.strip()

        if len(text) < 10:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=user_kb)
            return

        if len(text) > 500:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=user_kb)
            return

        await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...")
        await state.clear()

        try:
            logger.info(
                f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: –≤—Ä–µ–º—è={datetime.now().strftime('%Y-%m-%d %H:%M:%S')}, "
                f"—é–∑–µ—Ä={message.from_user.id}|{message.from_user.full_name}, —Ç–µ–∫—Å—Ç={text}"
                )
            resp = await ask_ai(text)
            db.add_request(text, message.from_user.id, json.dumps(resp, ensure_ascii=False))
        except Exception:
            logger.exception("AI request failed")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞", reply_markup=user_kb)
            return

        if not resp:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", reply_markup=user_kb)
            return

        if resp.get("error"):
            extra = f" {resp['response']}" if resp.get('response') else ""
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{resp['error']}{extra}",
                reply_markup=user_kb,
                )
            return

        if "events_tasks" not in resp:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n–≤ JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'events_tasks'", reply_markup=user_kb)
            return

        await message.answer(resp.get("response", ""), reply_markup=user_kb)

        event_tasks = [t for t in resp["events_tasks"] if t.get("type", "").strip().lower() == "event"]
        if not event_tasks:
            return

        ics_filename = generate_ics(event_tasks)
        if not ics_filename:
            logger.error("Failed to generate ICS file")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
                reply_markup=user_kb,
                )
            return

        try:
            await send_ics_file(message.chat.id, ics_filename)
        finally:
            try:
                os.unlink(ics_filename)
            except OSError:
                logger.exception("Failed to remove temp file %s", ics_filename)
    finally:
        await state.update_data(busy=False)


async def send_ics_file(chat_id, ics_filename):
    file = FSInputFile(ics_filename)
    await bot.send_document(chat_id, file)
