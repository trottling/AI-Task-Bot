import logging
import os

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from ai_utils.worker import ask_ai
from ics_util.generator import generate_ics
from loader import bot

logger = logging.getLogger(__name__)

class TaskCreation(StatesGroup):
    waiting_for_text = State()

async def start_ics_creation(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏:")
    await state.set_state(TaskCreation.waiting_for_text)

async def create_ics_command(message: Message, state: FSMContext):
    text = message.text.strip()

    if len(text) < 10:
        await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    if len(text) > 500:
        await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≤–µ–Ω—Ç–∞...")
    await state.clear()

    try:
        resp = await ask_ai(text, message.from_user.id)
    except Exception:
        logger.exception("AI request failed")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        return

    if not resp:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        return

    if resp.get("error"):
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: {resp['error']}")
        return

    if "events_tasks" not in resp:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: –≤ JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'events_tasks'")
        return

    await message.answer(resp.get("response", ""))

    for event_task in resp["events_tasks"]:
        ics_filename = generate_ics(event_task)
        if not ics_filename:
            logger.error("Failed to generate ICS file for task: %s", event_task)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á")
            continue
            
        try:
            await send_ics_file(message.chat.id, ics_filename)
        finally:
            try:
                os.unlink(ics_filename)
            except OSError:
                logger.exception("Failed to remove temp file %s", ics_filename)


async def send_ics_file(chat_id, ics_filename):
    with open(ics_filename, "rb") as file:
        await bot.send_document(chat_id, file)
