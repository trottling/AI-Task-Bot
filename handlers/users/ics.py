import logging
import os

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, Message, ReplyKeyboardMarkup, KeyboardButton

from keyboards.user import collect_kb, user_kb
from loader import bot, db, ics_creator
from services.task_service import TaskService

logger = logging.getLogger(__name__)

task_service = TaskService(db=db, ics_creator=ics_creator)

router = Router()


class TaskCreation(StatesGroup):
    collecting_tasks = State()
    generating = State()


async def start_ics_creation(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == TaskCreation.collecting_tasks.state:
        await message.answer('‚õîÔ∏è –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å**".', reply_markup=collect_kb, parse_mode="MarkdownV2")
        return

    await state.clear()
    await state.set_state(TaskCreation.collecting_tasks)
    await state.update_data(tasks=[])
    await message.answer('‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".\n\n‚ÑπÔ∏è –ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Å—É—Ç—å, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ –∏ –∫–≤–∞–¥—Ä–∞—Ç –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞', reply_markup=collect_kb)


@router.message(TaskCreation.collecting_tasks, lambda m: m.text and m.text.strip() not in ["‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"])
async def collect_task_message(message: Message, state: FSMContext):
    data = await state.get_data()
    tasks = data.get("tasks", [])
    tasks.append(message.text.strip())
    await state.update_data(tasks=tasks)
    await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.", reply_markup=collect_kb)


@router.message(TaskCreation.collecting_tasks, lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_task_collection(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=user_kb)


@router.message(TaskCreation.collecting_tasks, lambda m: m.text == "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def finish_task_collection(message: Message, state: FSMContext):
    data = await state.get_data()
    tasks = data.get("tasks", [])
    if not tasks:
        await message.answer("‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É.", reply_markup=collect_kb)
        return

    await state.set_state(TaskCreation.generating)
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...", reply_markup=user_kb)
    await state.clear()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    all_text = "\n".join(tasks)
    result = await task_service.process_task_text(text=all_text, user_id=message.from_user.id, chat_id=message.chat.id, message_chat_type=message.chat.type)

    if not result.get("success"):
        await message.answer(result["message"], reply_markup=user_kb, parse_mode="MarkdownV2")
        return

    await message.answer(result["message"], reply_markup=user_kb, parse_mode="MarkdownV2")

    event_tasks = result.get("event_tasks")
    if not event_tasks:
        return

    ics_filename = task_service.generate_ics(event_tasks)
    if not ics_filename:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ICS —Ñ–∞–π–ª")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", reply_markup=user_kb, parse_mode="MarkdownV2")
        return

    try:
        await send_ics_file(message.chat.id, ics_filename)
    finally:
        try:
            os.unlink(ics_filename)
        except OSError as e:
            logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {ics_filename}: {e}")


async def send_ics_file(chat_id: int, ics_filename: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª ICS."""
    if not os.path.exists(ics_filename):
        logger.error(f"–§–∞–π–ª {ics_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        await bot.send_document(chat_id, FSInputFile(ics_filename))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICS: {e}")


@router.message(Command("create"))
async def create_from_reply(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/create** –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", parse_mode="MarkdownV2")
        return

    if not message.reply_to_message or not message.reply_to_message.text:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/create** –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.", parse_mode="MarkdownV2")
        return

    if message.from_user.username == bot.username:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")
        return

    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...")

    result = await task_service.process_task_text(text=message.reply_to_message.text.strip(), user_id=message.from_user.id, chat_id=message.chat.id, message_chat_type=message.chat.type)
    if not result.get("success"):
        await message.answer(result["message"])
        return

    await message.answer(result["message"])

    event_tasks = result.get("event_tasks")
    if not event_tasks:
        return

    ics_filename = task_service.generate_ics(event_tasks)
    if not ics_filename:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ICS —Ñ–∞–π–ª")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ICS —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return

    try:
        await send_ics_file(message.chat.id, ics_filename)
    finally:
        try:
            os.unlink(ics_filename)
        except OSError as e:
            logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {ics_filename}: {e}")
