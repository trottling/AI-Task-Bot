import logging

from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.user import user_kb
from loader import ADMINS, db
from .settings import settings_command

logger = logging.getLogger(__name__)


async def start_command(message: Message) -> None:
    if message.chat.type != "private":
        chat_id = message.chat.id
        try:
            db.add_chat(chat_id=chat_id, title=message.chat.title or "")
        except Exception as e:
            logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ –ë–î: {e}")

        if not db.has_chat_access(chat_id):
            await message.answer(f"üö´ –£ —á–∞—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n‚ÑπÔ∏è ID —á–∞—Ç–∞:\n>{chat_id}", parse_mode="MarkdownV2")
            return

        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ")
        return

    full_name = message.from_user.full_name
    telegram_id = message.from_user.id

    try:
        db.add_user(full_name=full_name, telegram_id=telegram_id)
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

    if telegram_id not in ADMINS and not db.has_access(telegram_id):
        await message.answer(f"üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n‚ÑπÔ∏è –í–∞—à ID: {telegram_id}")
        return

    await message.answer(text=f'üëã –ü—Ä–∏–≤–µ—Ç, {full_name}, –Ω–∞–∂–º–∏ "–ü–æ–º–æ—â—å" —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç', reply_markup=user_kb)


async def help_command(message: Message) -> None:
    await message.answer(
        "‚ÑπÔ∏è –ë–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "1) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "20 —è–Ω–≤–∞—Ä—è, –≤–æ–∂–¥–µ–Ω–∏–µ –≤ 10 —á–∞—Å–æ–≤, —Å —Å–æ–±–æ–π –≤–∑—è—Ç—å –ø–∞—Å–ø–æ—Ä—Ç\n\n"
        "* –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ —á–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create\n\n"
        "2) –û—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª –±–æ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ª—é–±–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –Ω–∞ Android, IPhone –∏–ª–∏ –ü–ö\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\nhttps://telegra.ph/111-07-01-32",
        reply_markup=user_kb
        )


async def settings_menu_command(message: Message, state: FSMContext):
    await settings_command(message, state)


async def create_command(message: Message, state: FSMContext):
    from .ics import start_ics_creation
    await start_ics_creation(message, state)
